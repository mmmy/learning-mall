{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction "},"architecture/arch_01.html":{"url":"architecture/arch_01.html","title":"mall整合SpringBoot+MyBatis搭建基本骨架","keywords":"","body":"mall整合SpringBoot+MyBatis搭建基本骨架 本文主要讲解mall整合SpringBoot+MyBatis搭建基本骨架，以商品品牌为例实现基本的CRUD操作及通过PageHelper实现分页查询 mysql数据库环境搭建 下载并安装mysql5.7版本，下载地址：https://dev.mysql.com/downloads/installer/ 设置数据库帐号密码：root root 下载并安装客户端连接工具Navicat,下载地址：http://www.formysql.com/xiazai.html 创建数据库mall 导入mall的数据库脚本，脚本地址：https://github.com/macrozheng/mall-learning/blob/master/document/sql/mall.sql 项目使用框架介绍 SpringBoot SpringBoot可以让你快速构建基于Spring的Web应用程序，内置多种Web容器(如Tomcat)，通过启动入口程序的main函数即可运行。 PagerHelper MyBatis分页插件，简单的几行代码就能实现分页，在与SpringBoot整合时，只要整合了PagerHelper就自动整合了MyBatis。 PageHelper.startPage(pageNum, pageSize); //之后进行查询操作将自动进行分页 List brandList = brandMapper.selectByExample(new PmsBrandExample()); //通过构造PageInfo对象获取分页信息，如当前页码，总页数，总条数 PageInfo pageInfo = new PageInfo(list); Druid alibaba开源的数据库连接池，号称Java语言中最好的数据库连接池。 Mybatis generator MyBatis的代码生成器，可以根据数据库生成model、mapper.xml、mapper接口和Example，通常情况下的单表查询不用再手写mapper。 项目搭建 使用IDEA初始化一个SpringBoot项目 添加项目依赖 4.0.0 org.springframework.boot spring-boot-starter-parent 2.3.5.RELEASE com.example.mall learning-mall-01 0.0.1-SNAPSHOT learning-mall-01 Demo project for Spring Boot 1.8 org.springframework.boot spring-boot-starter org.springframework.boot spring-boot-starter-web org.springframework.boot spring-boot-starter-actuator org.springframework.boot spring-boot-starter-test test org.junit.vintage junit-vintage-engine com.github.pagehelper pagehelper-spring-boot-starter 1.3.0 com.alibaba druid-spring-boot-starter 1.1.22 org.mybatis.generator mybatis-generator-core 1.4.0 mysql mysql-connector-java 8.0.21 org.springframework.boot spring-boot-maven-plugin 修改SpringBoot配置文件 在application.yml中添加数据源配置和MyBatis的mapper.xml的路径配置。 server: port: 8080 spring: datasource: url: jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai username: root password: root mybatis: mapper-locations: - classpath:mapper/*.xml - classpath*:com/**/mapper/*.xml 项目结构说明 Mybatis generator 配置文件 配置数据库连接，Mybatis generator生成model、mapper接口及mapper.xml的路径。 运行Generator的main函数生成代码 package com.example.mall.learning.mbg; import org.mybatis.generator.api.MyBatisGenerator; import org.mybatis.generator.config.Configuration; import org.mybatis.generator.config.xml.ConfigurationParser; import org.mybatis.generator.internal.DefaultShellCallback; import java.io.InputStream; import java.util.ArrayList; import java.util.List; public class Generator { public static void main(String[] args) throws Exception { //MGB 执行过程中的警告 List warnings = new ArrayList(); // 覆盖 boolean overwrite = true; // 读取MBG配置文件 InputStream is = Generator.class.getResourceAsStream(\"/generatorConfig.xml\"); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(is); is.close(); DefaultShellCallback callback = new DefaultShellCallback(overwrite); // 创建MBG MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); // 执行 myBatisGenerator.generate(null); // 输出警告 for(String warnging: warnings) { System.out.println(warnging); } } } 添加MyBatis的Java配置 用于配置需要动态生成的mapper接口的路径 package com.example.mall.learning.config; import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Configuration; @Configuration @MapperScan(value = \"com.example.mall.learning.mbg.mapper\") public class MyBatisConfig { } 实现Controller中的接口 实现PmsBrand表中的添加、修改、删除及分页查询接口。 package com.example.mall.learning.controller; import com.example.mall.learning.common.api.CommonPage; import com.example.mall.learning.common.api.CommonResult; import com.example.mall.learning.mbg.model.PmsBrand; import com.example.mall.learning.service.PmsBrandService; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Controller @RequestMapping(\"/brand\") public class PmsBrandController { @Autowired private PmsBrandService demoService; private static final Logger LOGGER = LoggerFactory.getLogger(PmsBrandController.class); @RequestMapping(value = \"listAll\", method = RequestMethod.GET) @ResponseBody public CommonResult> getBrandList() { List brandList = demoService.listAllBrand(); return CommonResult.success(brandList); } @RequestMapping(value = \"/create\", method = RequestMethod.POST) @ResponseBody public CommonResult createBrand(@RequestBody PmsBrand pmsBrand) { CommonResult commonResult; int count = demoService.createBrand(pmsBrand); if (count == 1) { commonResult = CommonResult.success(pmsBrand); } else { commonResult = CommonResult.failed(\"操作失败\"); } LOGGER.debug(\"create Brand \" + (count == 1 ? \"success\" : \"failed\") + \":{}\", pmsBrand); return commonResult; } @RequestMapping(value = \"/update/{id}\", method = RequestMethod.POST) @ResponseBody public CommonResult updateBrand(@PathVariable(\"id\") Long id, @RequestBody PmsBrand pmsBrand) { CommonResult commonResult; int count = demoService.updateBrand(id, pmsBrand); commonResult = count == 1 ? CommonResult.success(pmsBrand) : CommonResult.failed(\"操作失败\"); LOGGER.debug(\"update Brand \" + (count == 1 ? \"success\" : \"failed\") + \":{}\", pmsBrand); return commonResult; } @RequestMapping(value = \"/delete/{id}\", method = RequestMethod.GET) @ResponseBody public CommonResult deleteBrand(@PathVariable(\"id\") Long id) { int count = demoService.deleteBrand(id); boolean isSuccess = count == 1; LOGGER.debug(\"delete Brand \" + (isSuccess ? \"success\" : \"failed\") + \":id={}\", id); return isSuccess ? CommonResult.success(null) : CommonResult.failed(\"操作失败\"); } @RequestMapping(value = \"/list\", method = RequestMethod.GET) @ResponseBody public CommonResult> listBrand(@RequestParam(value = \"pageNum\", defaultValue = \"1\") Integer pageNum, @RequestParam(value = \"pageSize\", defaultValue = \"10\") Integer pageSize) { List brandList = demoService.listBrand(pageNum, pageSize); return CommonResult.success(CommonPage.resetPage(brandList)); } @RequestMapping(value = \"/{id}\", method = RequestMethod.GET) @ResponseBody public CommonResult brand(@PathVariable(\"id\") long id) { return CommonResult.success(demoService.getBrand(id)); } } 添加Service接口 package com.example.mall.learning.service; import com.example.mall.learning.mbg.model.PmsBrand; import java.util.List; public interface PmsBrandService { List listAllBrand(); int createBrand(PmsBrand brand); int updateBrand(Long id, PmsBrand brand); int deleteBrand(Long id); List listBrand(int pageNum, int pageSize); PmsBrand getBrand(Long id); } 实现Service接口 package com.example.mall.learning.service.impl; import com.example.mall.learning.mbg.mapper.PmsBrandMapper; import com.example.mall.learning.mbg.model.PmsBrand; import com.example.mall.learning.mbg.model.PmsBrandExample; import com.example.mall.learning.service.PmsBrandService; import com.github.pagehelper.PageHelper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class PmsBrandServiceImpl implements PmsBrandService { @Autowired private PmsBrandMapper brandMapper; @Override public List listAllBrand() { return brandMapper.selectByExample(new PmsBrandExample()); } @Override public int createBrand(PmsBrand brand) { return brandMapper.insertSelective(brand); } @Override public int updateBrand(Long id, PmsBrand brand) { brand.setId(id); return brandMapper.updateByPrimaryKeySelective(brand); } @Override public int deleteBrand(Long id) { return brandMapper.deleteByPrimaryKey(id); } @Override public List listBrand(int pageNum, int pageSize) { PageHelper.startPage(pageNum, pageSize); return brandMapper.selectByExample(new PmsBrandExample()); } @Override public PmsBrand getBrand(Long id) { return brandMapper.selectByPrimaryKey(id); } } 项目源码地址 https://github.com/mmmy/learning-mall/tree/main/learning-mall-01 "},"architecture/arch_02.html":{"url":"architecture/arch_02.html","title":"mmall整合Swagger-UI实现在线API文档","keywords":"","body":"mall整合Swagger-UI实现在线API文档 本文主要讲解mall是如何通过整合Swagger-UI来实现一份相当完善的在线API文档的。 项目使用框架介绍 Swagger-UI Swagger-UI是HTML, Javascript, CSS的一个集合，可以动态地根据注解生成在线API文档。 常用注解 @Api：用于修饰Controller类，生成Controller相关文档信息 @ApiOperation：用于修饰Controller类中的方法，生成接口方法相关文档信息 @ApiParam：用于修饰接口中的参数，生成接口参数相关文档信息 @ApiModelProperty：用于修饰实体类的属性，当实体类是请求参数或返回结果时，直接生成相关文档信息 整合Swagger-UI 添加项目依赖 在pom.xml中新增Swagger-UI相关依赖 io.springfox springfox-swagger2 2.9.2 io.springfox springfox-swagger-ui 2.9.2 添加Swagger-UI的配置 添加Swagger-UI的Java配置文件 注意：Swagger对生成API文档的范围有三种不同的选择 生成指定包下面的类的API文档 生成有指定注解的类的API文档 生成有指定注解的方法的API文档 package com.example.mall.learning.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2; @Configuration @EnableSwagger2 public class Swagger2Config { @Bean public Docket createResApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(\"com.example.mall.learning.controller\")) .paths(PathSelectors.any()) .build(); } private ApiInfo apiInfo() { Contact contact = new Contact(\"Kelly\", \"www.xxx.com\", \"xxxx@xx.com\"); return new ApiInfoBuilder() .title(\"SwaggerUI演示\") .description(\"learning-mall\") .contact(contact) .version(\"1.0\") .build(); } } 给PmsBrandController添加Swagger注解 给原有的品牌管理Controller添加上Swagger注解 package com.example.mall.learning.controller; import com.example.mall.learning.common.api.CommonPage; import com.example.mall.learning.common.api.CommonResult; import com.example.mall.learning.mbg.model.PmsBrand; import com.example.mall.learning.service.PmsBrandService; import io.swagger.annotations.Api; import io.swagger.annotations.ApiOperation; import io.swagger.annotations.ApiParam; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Api(tags={\"PmsBrandController\"}, value = \"商品品牌管理\") @Controller @RequestMapping(\"/brand\") public class PmsBrandController { @Autowired private PmsBrandService demoService; private static final Logger LOGGER = LoggerFactory.getLogger(PmsBrandController.class); @ApiOperation(\"获取所有品牌列表\") @RequestMapping(value = \"listAll\", method = RequestMethod.GET) @ResponseBody public CommonResult> getBrandList() { List brandList = demoService.listAllBrand(); return CommonResult.success(brandList); } @RequestMapping(value = \"/create\", method = RequestMethod.POST) @ResponseBody public CommonResult createBrand(@RequestBody PmsBrand pmsBrand) { CommonResult commonResult; int count = demoService.createBrand(pmsBrand); if (count == 1) { commonResult = CommonResult.success(pmsBrand); } else { commonResult = CommonResult.failed(\"操作失败\"); } LOGGER.debug(\"create Brand \" + (count == 1 ? \"success\" : \"failed\") + \":{}\", pmsBrand); return commonResult; } @RequestMapping(value = \"/update/{id}\", method = RequestMethod.POST) @ResponseBody public CommonResult updateBrand(@PathVariable(\"id\") @ApiParam(\"品牌ID\") Long id, @RequestBody PmsBrand pmsBrand) { CommonResult commonResult; int count = demoService.updateBrand(id, pmsBrand); commonResult = count == 1 ? CommonResult.success(pmsBrand) : CommonResult.failed(\"操作失败\"); LOGGER.debug(\"update Brand \" + (count == 1 ? \"success\" : \"failed\") + \":{}\", pmsBrand); return commonResult; } @RequestMapping(value = \"/delete/{id}\", method = RequestMethod.GET) @ResponseBody public CommonResult deleteBrand(@PathVariable(\"id\") @ApiParam(\"品牌ID\") Long id) { int count = demoService.deleteBrand(id); boolean isSuccess = count == 1; LOGGER.debug(\"delete Brand \" + (isSuccess ? \"success\" : \"failed\") + \":id={}\", id); return isSuccess ? CommonResult.success(null) : CommonResult.failed(\"操作失败\"); } @RequestMapping(value = \"/list\", method = RequestMethod.GET) @ResponseBody public CommonResult> listBrand(@RequestParam(value = \"pageNum\", defaultValue = \"1\") Integer pageNum, @RequestParam(value = \"pageSize\", defaultValue = \"10\") Integer pageSize) { List brandList = demoService.listBrand(pageNum, pageSize); return CommonResult.success(CommonPage.resetPage(brandList)); } @RequestMapping(value = \"/{id}\", method = RequestMethod.GET) @ResponseBody public CommonResult brand(@PathVariable(\"id\") @ApiParam(\"品牌ID\") long id) { return CommonResult.success(demoService.getBrand(id)); } } 修改MyBatis Generator注释的生成规则 CommentGenerator为MyBatis Generator的自定义注释生成器，修改addFieldComment方法使其生成Swagger的@ApiModelProperty注解来取代原来的方法注释，添加addJavaFileComment方法，使其能在import中导入@ApiModelProperty，否则需要手动导入该类，在需要生成大量实体类时，是一件非常麻烦的事。 package com.example.mall.learning.mbg; import org.mybatis.generator.api.IntrospectedColumn; import org.mybatis.generator.api.IntrospectedTable; import org.mybatis.generator.api.dom.java.CompilationUnit; import org.mybatis.generator.api.dom.java.Field; import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType; import org.mybatis.generator.internal.DefaultCommentGenerator; import org.mybatis.generator.internal.util.StringUtility; import java.util.Properties; public class CommentGenerator extends DefaultCommentGenerator { private boolean addRemarkComments = false; private static final String EXAMPLE_SUFFIX=\"Example\"; private static final String API_MODEL_PROPERTY_FULL_CLASS_NAME=\"io.swagger.annotations.ApiModelProperty\"; /** * 设置用户配置的参数 */ @Override public void addConfigurationProperties(Properties properties) { super.addConfigurationProperties(properties); this.addRemarkComments = StringUtility.isTrue(properties.getProperty(\"addRemarkComments\")); } /** * 给字段添加注释 */ @Override public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) { String remarks = introspectedColumn.getRemarks(); //根据参数和备注信息判断是否添加备注信息 if (addRemarkComments && StringUtility.stringHasValue(remarks)) { // addFieldJavaDoc(field, remarks); if (remarks.contains(\"\\\"\")) { remarks = remarks.replace(\"\\\"\", \"'\"); } field.addJavaDocLine(\"@ApiModelProperty(value=\\\"\" + remarks + \"\\\")\"); } } /** * 给model的字段添加注释 */ private void addFieldJavaDoc(Field field, String remarks) { //文档注释开始 field.addJavaDocLine(\"/**\"); //获取数据库字段的备注信息 String[] remarkLines = remarks.split(System.getProperty(\"line.separator\")); for (String remarkLine : remarkLines) { field.addJavaDocLine(\" * \" + remarkLine); } addJavadocTag(field, false); field.addJavaDocLine(\" */\"); } @Override public void addJavaFileComment(CompilationUnit compilationUnit) { super.addJavaFileComment(compilationUnit); compilationUnit.addImportedType(new FullyQualifiedJavaType(API_MODEL_PROPERTY_FULL_CLASS_NAME)); } } 运行代码生成器重新生成mbg包中的代码 运行com.macro.mall.tiny.mbg.Generator的main方法，重新生成mbg中的代码，可以看到PmsBrand类中已经自动根据数据库注释添加了@ApiModelProperty注解 运行项目，查看结果 接口地址：http://localhost:8080/swagger-ui.html 对请求参数已经添加说明 对返回结果已经添加说明 直接在在线文档上面进行接口测试 项目源码地址 https://github.com/mmmy/learning-mall/tree/main/learning-mall-02 "}}